
plugins {
    id "io.toolebox.git-versioner" version "1.6.5"
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.24.1'
    id 'application'
}

group 'com.github.cfogrady'

repositories {
    mavenLocal()
    mavenCentral()
}

javafx {
    version = "17"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing' ]
}

dependencies {
    //lombok
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    implementation 'com.github.cfogrady:vb-dim-reader:2.0.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.slf4j:slf4j-simple:1.7.32'
}

application {
    mainClass.set("com.github.cfogrady.dim.modifier.Main")
    mainModule.set("DIM.Modifier.main")
}

compileJava {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

abstract class WindowsBuildImageTask extends DefaultTask {
    @TaskAction
    def buildImage() {
        def f = new File('warp-packer.exe')
        def version = getProject().getVersion().toString()
        if (!f.exists()) {
            new URL('https://github.com/dgiagio/warp/releases/download/v0.3.0/windows-x64.warp-packer.exe').withInputStream{ i -> f.withOutputStream{ it << i }}
        }
        def command = "warp-packer.exe --arch windows-x64 --input_dir build\\image --exec bin\\DIM-Modifier.bat --output DIM-Modifier-" + version + ".exe"
        def proc = command.execute()
        proc.waitForProcessOutput(System.out, System.err)
        //This is broken in rcedit :(
        // For now use resource hacker to manually add the icon during release.
//        def rc = new File("rcedit-x64.exe")
//        if(!rc.exists()) {
//            new URL('https://github.com/electron/rcedit/releases/download/v1.1.1/rcedit-x64.exe').withInputStream{ i -> rc.withOutputStream{ it << i }}
//        }
//        command = "rcedit-x64.exe DIM-Modifier-" + version + ".exe --set-icon icon.ico"
//        proc = command.execute()
//        proc.waitForProcessOutput(System.out, System.err)
        command = "\"C:\\Program Files (x86)\\Resource Hacker\\ResourceHacker.exe\"  -open DIM-Modifier-" + version + ".exe -save DIM-Modifier-" + version + ".exe -action addskip -res icon.ico -mask ICONGROUP,MAINICON"
        proc = command.execute()
        proc.waitForProcessOutput(System.out, System.err)

    }
}

abstract class LinuxBuildImageTask extends DefaultTask {
    @TaskAction
    def buildImage() {
        def version = getProject().getVersion().toString()
        def f = new File('warp-packer')
        if (!f.exists()) {
            new URL('https://github.com/dgiagio/warp/releases/download/v0.3.0/linux-x64.warp-packer').withInputStream{ i -> f.withOutputStream{ it << i }}
        }
        def command = "warp-packer --arch linux-x64 --input_dir build/image --exec bin/DIM-Modifier --output DIM-Modifier-" + version
        def proc = command.execute()
        proc.waitForProcessOutput(System.out, System.err)
    }
}

versioner {
    pattern {
        pattern = "%M.%m.%p(.%c-%h)"
    }
}

// Create a task using the task type
tasks.register('buildImageWin', WindowsBuildImageTask).configure{
    dependsOn(provider {
        tasks.findByName("jlink")
    })
}

tasks.withType(JavaExec) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-Xdebug', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005'
    }
}

tasks.register('buildImageLinux', LinuxBuildImageTask).configure{
    dependsOn(provider {
        tasks.findByName("jlink")
    })
}

test {
    useJUnitPlatform()
}